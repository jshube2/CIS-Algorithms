Nathan Smith, Joshua Shubert
CIS 1
Programming Assignment 4

--EXECUTING PROGRAM--
To run the program, navigate to programs/source/p4_driver.py
To generate PA4-A-Debug-Output using the linear method, enter the following:
python p4_driver.py A-Debug linear

To use the sphere method, enter the following:
python p4_driver.py A-Debug sphere

Finally, to use the covariance tree method, enter the following:
python p4_driver.py A-Debug tree

To generate the remaining output files, enter B through F-Debug as the second
argument for the debug files, and G through J-Unknown for the unknown files.

All generated output files may be found in the programs/output folder
All input files may be found in the programs/data folder

For unit testing, enter the following:
python p4_tests.py

This will execute the unit tests, each of which should pass successfully.


--REPORT--
The program report may be found in the root directory, as p4_report.pdf.


--FILE LISTING--
A listing and description of each of the source files is as follows, and may
also be found in the program report:

p4_driver.py: The programâ€™s main driver, which generates the output file for a
given sample readings input.

ICPread.py: Contains all files for reading input data and generating arrays.

ICPmatch.py: Contains all files for find point cloud transformations and determining
ICP matches. Added methods for iterative ICP and sphere method of finding closest point.

p4_tests.py: Contains test files for calculating d, finding the closest point in a
triangle, and performing the full linear ICP matching, sphere ICP matching, and
Covariance Tree ICP matching, as well as previous tests for point cloud transformations.

data_methods.py: Contains methods for computations and transformations on frames
and point clouds.

sphere.py: Contains the sphere class holding a center point and radius, and the
method for calculating these.

triangle.py: Contains the triangle class for determining the closest point on triangles
with bounded spheres.

cov_tree_node.py: Contains the covariance tree node class and all essential functions
for find frame and bounds, generating subtrees, and finding closest points.


--ISSUES--
If you experience any issues in running the program, please contact me at
nathansforyou@gmail.com
